/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   bsp.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: cbilga <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/03/13 08:49:52 by cbilga            #+#    #+#             */
/*   Updated: 2019/03/15 08:53:54 by cbilga           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/**
BSP algorithm:

Map structure:

Polygon : x1 y1 z1 ; x2 y2 z2 ; .... : "texture.tga"

- build solid node LEAF tree : (polygon plane use as splitter; polygon goes into front list but cannot be used as splitter again)
	- init polygons arrays
	- load polygons from file
	- add them to the list and split them in triangles
	- pick a polygon as splitter
	- check if next polygons in list are in front, back, onplane or spanning
	- in spanning -> split and give to children same BEENUSEDASSPLIT, add each side to corresponding list (front / back)
	- store it in the node
	- mark it as "used as splitter" so it won't be used again
	- calculate bounding box for each front/back list
	? loop through the polygon list and classify each against the splitter (Front / Back)
	- check if all polygons in FRONT list have all been used as splitters - if yes the list is a LEAF
	- store the polygons from LEAF into Polygon Array (realloc array when limit is reached)
	- store number into Leaf Array
	- remove the polygons from the listl
	- if BACK list is empty, store -1 meaning it's a solid space


	Node structure example:
	

	struct BOUNDINGBOX
	{
		D3DXVECTOR3 BoxMin;
		D3DXVECTOR3 BoxMax;
	};

	struct POLYGON 
	{
		D3DLVERTEX *VertexList;
		D3DXVECTOR3 Normal;
		WORD NumberOfVertices;
		WORD NumberOfIndices;
		WORD *Indices;
		POLYGON * Next;
		bool BeenUsedAsSplitter;
		long TextureIndex;
	};

	struct NODE 
	{
		unsigned char IsLeaf;
		unsigned long Plane;
		unsigned long Front;
		signed long Back;
		BOUNDINGBOX BoundingBox;
	};

	struct PLANE
	{
		D3DXVECTOR3 PointOnPlane;
		D3DXVECTOR3 Normal;
	};

	struct LEAF
	{
		long StartPolygon;
		long EndPolygon; 
		long PortalIndexList[50]; 
		long NumberOfPortals;
		long PVSIndex;
		BOUNDINGBOX BoundingBox;
	};

- calculate PVS (potential visibility set - array stored for each leaf storing visbility information about all other leafs)
	- store data in a common array for all leafs (1 bit per leaf)
	- use zero length run (each time we got an empty byte it's followed by a byte saying how many consecutive bytes have 0)


Runtime:

- traverse BSP to find in which leaf we are

	Code example:
	void DrawTree(long leaf)
	{
		POLYGON *CurrentPoly;
		int i;
		long PVSOFFSET=LeafArray[leaf].PVSIndex;
		BYTE *PVSPointer=PVSData;
		PVSPointer+=PVSOFFSET;
		long currentleaf=0;
		while (currentleaf<NumberOfLeafs)
		{
			if (*PVSPointer!=0)
			{
				for (i=0;i<8;i++)
				{
					BYTE mask=1<<i;
					BYTE pvs=*PVSPointer;
					if (pvs&mask)
					{
						Render The Polygons in Leaf [ currentleaf ]; }
					}// end for if pvsdata
					currentleaf++;
				}// end for i;
				PVSPointer++;
			}
			else
			{// we have hit a zero so read in the next byte and see how long the run of zeros is
				PVSPointer++;
				BYTE RunLength=*PVSPointer;
				PVSPointer++;
				currentleaf+=RunLength*8;
			}
		}
	}


- check PVS data : render only leafs that are potentially visible
- use Z-buffer to store the distance to each leaf 

	Code example:
	void DrawTree (long CameraLeaf)
	{
		for (int i=0;i<NumberOfLeafs;i++)
		{
			long offset=CameraLeaf*numberOfLeafs;
			if (PVSData[offset+i]==1)
			{
				RenderLeaf(i);
			}
		}
	}
