/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   bsp_class.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: cbilga <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/03/15 11:54:21 by cbilga            #+#    #+#             */
/*   Updated: 2019/03/15 13:15:28 by cbilga           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "bsp.h"

static t_vec	vec_sub(t_vec *v1, t_vec *v2)
{
	
char class_poly(t_plane *plane, t_poly *poly)
{
	t_cpoly	*c;

	c->v1 = plane->point;
	c->i = 0;
	while (c->i < poly->nb_ver, c->i++)
	{
		c->v2 = poly->ver_list[c->i];
		c->dir = vec_sub(c->v1, c->v2);
int ClassifyPoly(PLANE *Plane,POLYGON * Poly)
{
	int Infront=0;
	int Behind=0;
	int OnPlane=0;
	float result;
	D3DXVECTOR3 *vec1=(D3DXVECTOR3 *)&Plane->PointOnPlane;
	for (int a=0;a<Poly->NumberOfVertices;a++)
	{
		D3DXVECTOR3 *vec2=(D3DXVECTOR3 *)&Poly->VertexList[a];
		D3DXVECTOR3 Direction=(*vec1)-(*vec2);
		result=D3DXVec3Dot(Direction,Plane->Normal);

		if (result>0.001)
		{
			Behind++;
		}
		else
			if (result<-0.001)
			{
				Infront++;
			}
			else
			{
				OnPlane++;
				Infront++;
				Behind++;
			}
	}

	if (OnPlane==Poly->NumberOfVertices) return CP_ONPLANE;
	if (Behind==Poly->NumberOfVertices) return CP_BACK;
	if (Infront==Poly->NumberOfVertices) return CP_FRONT;
	return CP_SPANNING;
}
